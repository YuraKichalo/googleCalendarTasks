{"version":3,"sources":["stores/AppStore.ts","stores/CalendarStore.ts","components/ModalInput..tsx","components/CalendarBtn.tsx","components/TodoListItem.tsx","components/TodoListInput.tsx","components/TodoList.tsx","stores/AuthStore.ts","components/Auth.js.tsx","components/AuthBtn.tsx","components/Header.tsx","components/App.tsx","index.tsx"],"names":["observable","id","title","action","val","tasks","inputVal","task","push","length","setTasks","filter","moment","startValue","endValue","ModalInput","observer","calendarStore","setStartValue","setEndValue","handleChange","name","className","value","onChange","CalendarBtn","removeTask","store","useModali","animated","toUpperCase","buttons","Button","label","isStyleCancel","onClick","toggleCompleteModal","isStyleDestructive","addTaskToCalendar","completeModal","toggleTaskAlert","taskAlert","event","summary","start","dateTime","toISOString","timeZone","end","ApiCalendar","createEvent","then","result","console","log","catch","error","Modal","TodoListItem","TodoListInput","inputTextRef","useRef","useState","inputError","setInputError","onInputChange","e","setInputVal","target","onSubmit","preventDefault","text","current","addTask","type","placeholder","ref","renderError","renderInput","TodoList","renderList","map","key","sign","this","Component","isSignIn","Auth","history","BtnError","setBtnError","authStore","AuthBtn","setIsSignIn","useEffect","onLoad","listenSign","signUpdate","handleClick","handleAuthClick","handleSignoutClick","withRouter","Header","App","props","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.264e796f.chunk.js","sourcesContent":["import {observable, action, computed} from \"mobx\";\n\nclass AppStore {\n    @observable tasks: {id: number, title: string}[] = [\n        {id: 0, title: 'learn TS'},\n        {id: 1, title: 'learn MOBX'},\n        {id: 2, title: 'learn new project'},\n    ];\n\n    @observable inputVal: string = '';\n\n    @action setTasks = (val: any): void => {\n        this.tasks = val;\n    };\n\n    @action setInputVal = (val: string): void => {\n        this.inputVal = val;\n    };\n\n    @action addTask = (task: string): void => {\n        const tasks = this.tasks;\n        tasks.push({\n            id: this.tasks.length + 1,\n            title: task\n        });\n\n        this.setTasks(tasks);\n    };\n\n    @action removeTask = (id: number): void => {\n        this.setTasks(this.tasks.filter(task => task.id !== id))\n    };\n}\n\nexport default new AppStore();","import {observable, action, computed} from \"mobx\";\nimport moment from 'moment';\n\nclass CalendarStore {\n    @observable startValue = moment();\n    @observable endValue = moment();\n\n    @action setStartValue = (val: any):void => {\n        this.startValue = val\n    };\n\n    @action setEndValue = (val: any):void => {\n        this.endValue = val\n    };\n}\n\nexport default new CalendarStore();","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react\";\n// @ts-ignore\nimport DatePicker from 'react-datepicker2';\n\nimport calendarStore from '../stores/CalendarStore';\n\n\nconst ModalInput:React.FC = observer(() => {\n    const {startValue, setStartValue, endValue, setEndValue} = calendarStore;\n\n    const handleChange = (val: any, name: string) => {\n        if (name === 'start') {\n            setStartValue(val)\n        } else {\n            setEndValue(val);\n        }\n    };\n\n    return (\n        <div className='modalInput'>\n            <label>\n                Start:\n                <DatePicker\n                    value={startValue}\n                    onChange={(value: any) => handleChange(value, 'start')}\n                />\n            </label>\n            <label>\n                Finish:\n                <DatePicker\n                    value={endValue}\n                    onChange={(value: any) => handleChange(value, 'end')}\n                />\n            </label>\n        </div>\n    );\n});\n\nexport default ModalInput;","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\n// @ts-ignore\nimport ApiCalendar from 'react-google-calendar-api';\n// @ts-ignore\nimport Modali, { useModali } from 'modali';\n\nimport ModalInput from \"./ModalInput.\";\nimport calendarStore from '../stores/CalendarStore';\nimport store from '../stores/AppStore'\n\ninterface TodoListProps {\n    title: string,\n    id: number\n}\n\nconst CalendarBtn: React.FC<TodoListProps> = observer(({ title, id }) => {\n    const { startValue, endValue } = calendarStore;\n    const { removeTask } = store;\n\n    const [completeModal, toggleCompleteModal] = useModali({\n        animated: true,\n        title: `Specify the day and timeframe for task \"${title.toUpperCase()}\"`,\n        buttons: [\n            <Modali.Button\n                label=\"Cancel\"\n                isStyleCancel\n                onClick={() => toggleCompleteModal()}\n            />,\n            <Modali.Button\n                label=\"YES\"\n                isStyleDestructive\n                onClick={() => addTaskToCalendar()}\n            />,\n        ]\n    });\n\n    const [taskAlert, toggleTaskAlert] = useModali({\n        animated: true,\n        title: `Task \"${title.toUpperCase()}\" was added to your calendar`,\n        buttons: [\n            <Modali.Button\n                label=\"OK\"\n                isStyleCancel\n                onClick={() => toggleTaskAlert()}\n            />\n        ],\n    });\n\n    const addTaskToCalendar = (): void => {\n        const event: object = {\n            summary: title,\n            start: {\n                dateTime: startValue.toISOString(),\n                timeZone: \"Europe/Paris\"\n            },\n            end: {\n                dateTime: endValue.toISOString(),\n                timeZone: \"Europe/Paris\"\n            }\n        };\n\n        ApiCalendar.createEvent(event)\n            .then((result: any) => {\n                console.log(result.result)\n            })\n            .catch((error: any) => {\n                console.log(error)\n            });\n\n        removeTask(id);\n        toggleCompleteModal();\n    };\n\n    const onBtnClick = (): void => {\n        toggleCompleteModal();\n    };\n\n    return (\n        <div>\n            <Modali.Modal {...taskAlert} />\n            <Modali.Modal {...completeModal} >\n                <ModalInput />\n            </Modali.Modal>\n            <button onClick={onBtnClick} className='ui blue button'>Add to calendar</button>\n        </div>\n    );\n});\n\nexport default CalendarBtn","import React from 'react';\nimport { observer } from 'mobx-react';\nimport store from '../stores/AppStore';\nimport CalendarBtn from \"./CalendarBtn\";\n\ninterface TodoListProps {\n    title: string,\n    id: number\n}\n\nconst TodoListItem: React.FC<TodoListProps> = observer(({ title, id }) => {\n    return (\n        <div className='item'>\n            <li className='middle aligned content list-content'>{title}</li>\n            <button onClick={() => store.removeTask(id)} className='ui red basic button'>remove</button>\n            <CalendarBtn title={title} id={id} />\n        </div>\n    )\n});\n\nexport default TodoListItem;","import React, { useRef, useState } from 'react';\nimport { observer } from \"mobx-react\";\nimport store from '../stores/AppStore';\n\nconst TodoListInput: React.FC = observer(() => {\n    const inputTextRef = useRef<HTMLInputElement>(null);\n    const [inputError, setInputError] = useState(false);\n\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        store.setInputVal(e.target.value);\n    };\n\n    const onFormSubmit = (e: React.FormEvent): void => {\n        e.preventDefault();\n        const text = inputTextRef.current!.value;\n\n        if (text) {\n            store.addTask(text);\n            store.setInputVal('');\n            setInputError(false);\n        } else {\n            setInputError(true);\n        }\n    };\n\n    const renderError = () => {\n        if (inputError) {\n            return <div className=\"ui pointing red basic label\">You can't add empty task :(</div>\n        }\n    };\n\n    const renderInput = () => {\n        const className = inputError ? 'field error' : 'field';\n\n        return (\n            <div className={className}>\n                <input\n                    type='text'\n                    placeholder='add task here...'\n                    value={store.inputVal}\n                    onChange={onInputChange}\n                    ref={inputTextRef}\n                />\n                {renderError()}\n            </div>\n        );\n    };\n\n    return (\n        <form className='ui form' onSubmit={onFormSubmit}>\n            {renderInput()}\n            <button className='ui button input-btn' type='submit'>Add</button>\n        </form>\n    )\n});\n\nexport default TodoListInput;","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\n// @ts-ignore\nimport ApiCalendar from 'react-google-calendar-api';\n\nimport store from '../stores/AppStore';\nimport TodoListItem from \"./TodoListItem\";\nimport TodoListInput from \"./TodoListInput\";\n\n@observer\nexport default class TodoList extends Component {\n    renderList = () => {\n        return store.tasks.map(({ id, title }) => {\n            return <TodoListItem key={id} id={id} title={title}/>\n        })\n    };\n\n    render () {\n        console.log(`sign In status: ${ApiCalendar.sign}`);\n        return (\n            <div>\n                <TodoListInput />\n                <ul className='ui divided items'>\n                    {this.renderList()}\n                </ul>\n            </div>\n        )\n    }\n}","import { observable, action } from \"mobx\";\n// @ts-ignore\nimport ApiCalendar from 'react-google-calendar-api';\n\nclass AuthStore {\n    @observable isSignIn: boolean = ApiCalendar.sign;\n\n    @action setIsSignIn = (val: boolean): void => {\n        this.isSignIn = val;\n    };\n}\n\nexport default new AuthStore();","import React, { useState, useEffect } from 'react';\n// @ts-ignore\nimport ApiCalendar from 'react-google-calendar-api';\nimport { observer } from \"mobx-react\";\n\nimport authStore from \"../stores/AuthStore\";\n\ninterface AuthProps {\n    history: object\n};\n\nconst Auth: React.FC<AuthProps> = observer(({ history }) => {\n    const [BtnError, setBtnError] = useState(false);\n    const { isSignIn } = authStore;\n\n    const handleClick = () => {\n        console.log(`Auth: ${ApiCalendar.sign}`);\n        console.log(ApiCalendar);\n        if (isSignIn) {\n            // @ts-ignore\n            history.push('/list');\n            setBtnError(false);\n        } else {\n            setBtnError(true);\n        }\n    };\n\n    const renderError = () => {\n        const text: string = isSignIn ? 'You successfully SIGNED IN' : 'Sign in with Google firs';\n        const className: string = isSignIn ? 'ui pointing green basic label' : 'ui pointing red basic label';\n        if (BtnError) {\n            return <div className={className}>{text}</div>\n        }\n    };\n\n    return (\n        <div className='auth'>\n            <div className='ui card'>\n                <div className='content'>\n                    <div className='header auth-header'>Hello mate !</div>\n                    <div className='description auth-description'>\n                        You need sign in with your Google account to access your calendar and create new tasks\n                    </div>\n                    <div className='extra content auth-content'>\n                        <button className='ui button primary' onClick={handleClick}>Start</button>\n                    </div>\n                    <div className='error'>{renderError()}</div>\n                </div>\n            </div>\n        </div>\n    );\n});\n\nexport default Auth;","import React, { useState, useEffect } from 'react';\n// @ts-ignore\nimport ApiCalendar from 'react-google-calendar-api';\nimport { withRouter } from 'react-router-dom';\nimport { observer } from \"mobx-react\";\n\nimport authStore from \"../stores/AuthStore\";\n\ninterface AuthProps {\n    history: object\n};\n\nconst AuthBtn: React.FC<AuthProps> = observer(({ history }) => {\n    const { isSignIn, setIsSignIn } = authStore;\n\n    useEffect(() => {\n        ApiCalendar.onLoad(() => {\n            ApiCalendar.listenSign(signUpdate)\n        });\n    }, []);\n\n    const signUpdate = (sign: boolean): void => {\n        setIsSignIn(sign)\n    };\n\n    console.log(`sign In status: ${isSignIn}`);\n\n    const handleClick = (name: string): void => {\n         if (name === 'signIn') {\n             ApiCalendar.handleAuthClick();\n         } else {\n             console.log('sign OUT');\n             ApiCalendar.handleSignoutClick();\n             // @ts-ignore\n             history.push('/');\n         }\n    };\n\n    const renderBtn = () => {\n        console.log(`sign in status in BUTTON: ${isSignIn}`);\n        if (isSignIn) {\n            return (\n                <button onClick={() => handleClick('signOut')} className='ui button'>\n                    Sign Out\n                </button>\n            );\n        } else {\n            return (\n                <button onClick={() => handleClick('signIn')} className='ui google red button'>\n                    <i className=\"google icon\" />\n                    Sign In with Google\n                </button>\n            );\n        }\n    };\n\n    return renderBtn();\n});\n\n// @ts-ignore\nexport default withRouter(AuthBtn);","import React from 'react';\n\nimport AuthBtn from \"./AuthBtn\";\n\nconst Header: React.FC = () => {\n    return (\n        <div className='main-header'>\n            Tasks tracker\n            <AuthBtn />\n        </div>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport { observer } from \"mobx-react\";\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport TodoList from \"./TodoList\";\nimport Auth from \"./Auth.js\";\nimport Header from \"./Header\";\n\n\nconst App: React.FC = observer((props) => {\n  return (\n    <BrowserRouter>\n        <div className=\"ui container\">\n            <Header />\n            <Route exact path='/' component={Auth} />\n            <Route exact path='/list' component={TodoList} />\n        </div>\n    </BrowserRouter>\n  );\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}